{"version":3,"sources":["components/ContactListItem/contactListItem.module.css","redux/contacts/contactsActions.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/PhonebookTitle/PhonebookTitle.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js","components/ContactForm/contactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","contact","id","uuidv4","text","showContactListItem","removeContact","toggleSameName","changeFilter","filter","connect","state","ownProps","item","contacts","items","find","dispatch","onRemove","contactsActions","className","styles","contactsCards","contactsCardsItems","button","type","onClick","normalizedFilter","toLowerCase","includes","TransitionGroup","component","map","CSSTransition","key","timeout","classNames","ContactForm","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onToggleSameName","onAddContact","this","container","form","onSubmit","label","inputs","onChange","placeholder","required","Component","mapDispatchToProps","onChangeFilter","PhonebookTitle","in","appear","unmountOnExit","App","createReducer","action","combineReducers","store","configureStore","reducer","contactReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20e85780.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsCards\":\"contactListItem_contactsCards__1iFgr\",\"contactsCardsItems\":\"contactListItem_contactsCardsItems__u82Sl\",\"button\":\"contactListItem_button__1dJ_P\"};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst addContact = createAction(\"contacts/addContact\", (name, number) => ({\r\n  payload: {\r\n    contact: {\r\n      id: uuidv4(),\r\n      text: name,\r\n      number: number,\r\n      showContactListItem: false,\r\n    },\r\n  },\r\n}));\r\n\r\n// const addContact = (name, number) => ({\r\n//   type: actionTypes.ADD,\r\n//   payload: {\r\n//     contact: {\r\n//       id: uuidv4(),\r\n//       text: name,\r\n//       number: number,\r\n//       showContactListItem: false,\r\n//     },\r\n//   },\r\n// });\r\n\r\nconst removeContact = createAction(\"contacts/removeContact\", (id) => ({\r\n  payload: {\r\n    id,\r\n  },\r\n}));\r\n\r\n// const removeContact = (id) => {\r\n//   return {\r\n//     type: actionTypes.REMOVE,\r\n//     payload: {\r\n//       id,\r\n//     },\r\n//   };\r\n// };\r\n\r\nconst toggleSameName = createAction(\"contacts/toggleSameName\");\r\n\r\n// const toggleSameName = (text) => {\r\n//   return {\r\n//     type: actionTypes.TOGGLE,\r\n//     payload: {\r\n//       text,\r\n//     },\r\n//   };\r\n// };\r\n\r\nconst changeFilter = createAction(\"contact/changeFilter\", (filter) => ({\r\n  payload: {\r\n    filter,\r\n  },\r\n}));\r\n\r\n// const changeFilter = (filter) => {\r\n//   return {\r\n//     type: actionTypes.FILTER,\r\n//     payload: {\r\n//       filter,\r\n//     },\r\n//   };\r\n// };\r\n\r\nexport default {\r\n  addContact,\r\n  removeContact,\r\n  toggleSameName,\r\n  changeFilter,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contactsActions\";\r\nimport styles from \"./contactListItem.module.css\";\r\n\r\nfunction ContactListItem({ text, number, onRemove }) {\r\n  return (\r\n    <li className={styles.contactsCards}>\r\n      <p className={styles.contactsCardsItems}>{text}:</p>\r\n      <p className={styles.contactsCardsItems}>{number}</p>\r\n      <button className={styles.button} type=\"button\" onClick={onRemove}>\r\n        x\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  text: PropTypes.string,\r\n  number: PropTypes.string,\r\n  onRemove: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const item = state.contacts.items.find((item) => item.id === ownProps.id);\r\n  return { ...item };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onRemove: () => dispatch(contactsActions.removeContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ContactListItem from \"../ContactListItem/ContactListItem\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./ContactList.css\";\r\n\r\nconst ContactList = ({ contacts }) => (\r\n  <TransitionGroup component=\"ul\" className=\"ContactList\">\r\n    {contacts.map(({ id }) => (\r\n      <CSSTransition key={id} timeout={250} classNames=\"TaskListSlide\">\r\n        <ContactListItem key={id} id={id} />\r\n      </CSSTransition>\r\n    ))}\r\n  </TransitionGroup>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   contacts: state.contacts.items,\r\n// });\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { items, filter } = state.contacts;\r\n\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  const visibleTasks = items.filter((contact) =>\r\n    contact.text.toLowerCase().includes(normalizedFilter)\r\n  );\r\n  return {\r\n    contacts: visibleTasks,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contactsActions\";\r\nimport styles from \"./contactForm.module.css\";\r\n\r\nexport class ContactForm extends Component {\r\n  static propTypes = {\r\n    onAddContact: PropTypes.func,\r\n  };\r\n\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onToggleSameName(this.state.name);\r\n    this.props.onAddContact(this.state.name, this.state.number);\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <form className={styles.form} onSubmit={this.handleSubmit}>\r\n          <label className={styles.label}>\r\n            Name\r\n            <input\r\n              className={styles.inputs}\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n              name=\"name\"\r\n              placeholder=\"name\"\r\n              required\r\n            />\r\n          </label>\r\n          <label className={styles.label}>\r\n            Tel.number\r\n            <input\r\n              className={styles.inputs}\r\n              type=\"number\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n              name=\"number\"\r\n              placeholder=\"number\"\r\n              required\r\n            />\r\n          </label>\r\n          <button className={styles.button} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: contactsActions.addContact,\r\n  onToggleSameName: contactsActions.toggleSameName,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contactsActions\";\r\nimport \"./Filter.css\";\r\n\r\nfunction Filter({ value, onChangeFilter }) {\r\n  return (\r\n    <div className={\"Container\"}>\r\n      <input\r\n        className={\"FilterInput\"}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={(e) => onChangeFilter(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.changeFilter,\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChangeFilter: PropTypes.func,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\nimport \"./PhonebookTitle.css\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nexport default function PhonebookTitle() {\r\n  return (\r\n    <CSSTransition\r\n      in={true}\r\n      appear={true}\r\n      timeout={500}\r\n      classNames=\"TitleSlide\"\r\n      unmountOnExit\r\n    >\r\n      <div>\r\n        <h1 className={\"Title\"}>Phonebook</h1>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n// import { v4 as uuidv4 } from \"uuid\";\nimport ContactList from \"./ContactList/ContactList\";\nimport ContactForm from \"./ContactForm/ContactForm\";\nimport Filter from \"./Filter/Filter\";\n// import Notification from \"./Notification/Notification\";\nimport PhonebookTitle from \"./PhonebookTitle/PhonebookTitle\";\n// import checkSameContact from \"../helpers/checkSameContact\";\nimport \"./styles.css\";\n\nexport class App extends Component {\n  // state = {\n  // contacts: [],\n  // filter: \"\",\n  // sameName: null,\n  // showNotification: false,\n  // showContactList: false,\n  // showContactListItem: false,\n  // };\n\n  // componentDidMount() {\n  //   const persistedTasks = localStorage.getItem(\"contacts\");\n  //   if (persistedTasks) {\n  //     this.setState({\n  //       contacts: JSON.parse(persistedTasks),\n  //       showContactList: true,\n  //     });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.contacts !== this.state.conacts) {\n  //     localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n  //   }\n  //   let timeoutID;\n  //   if (prevState.showNotification !== this.state.showNotification) {\n  //     timeoutID = setTimeout(\n  //       () => this.setState(() => ({ showNotification: false })),\n  //       3000\n  //     );\n  //   } else {\n  //     clearTimeout(timeoutID);\n  //   }\n  // }\n\n  render() {\n    // const {\n    //   contacts,\n    //   filter,\n    //   sameName,\n    //   showNotification,\n    //   showContactList,\n    //   showContactListItem,\n    // } = this.state;\n    // const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <>\n        <PhonebookTitle />\n\n        <ContactForm />\n\n        {/* <CSSTransition\n          in={showNotification}\n          timeout={1000}\n          classNames=\"Fade\"\n          unmountOnExit\n        >\n          <Notification name={sameName} />\n        </CSSTransition> */}\n\n        <h2 className={\"Contacts\"}>Contacts</h2>\n\n        <CSSTransition in={true} timeout={1000} classNames=\"Fade\" unmountOnExit>\n          <Filter />\n        </CSSTransition>\n\n        <CSSTransition\n          in={true}\n          timeout={500}\n          classNames=\"SlideIn\"\n          unmountOnExit\n        >\n          <ContactList />\n        </CSSTransition>\n      </>\n    );\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport contactsActions from \"./contactsActions\";\r\n\r\nconst addContacts = (state, action) => [...state, action.payload.contact];\r\n\r\nconst removeContact = (state, action) =>\r\n  state.filter((contact) => contact.id !== action.payload.id);\r\n\r\nconst toggleSameName = (state, action) =>\r\n  state.map((contact) =>\r\n    contact.text === action.payload\r\n      ? { ...contact, showContactListItem: true }\r\n      : contact\r\n  );\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.addContact]: addContacts,\r\n  [contactsActions.removeContact]: removeContact,\r\n  [contactsActions.toggleSameName]: toggleSameName,\r\n});\r\n\r\n// const items = (state = [], { payload, type }) => {\r\n//   switch (type) {\r\n//     case contactsActions.addContact.type:\r\n//       return [...state, payload.contact];\r\n\r\n//     case contactsActions.removeContact.type:\r\n//       return state.filter((contact) => contact.id !== payload.id);\r\n\r\n//     case contactsActions.toggleSameName.type:\r\n//       return state.map((contact) =>\r\n//         contact.text === payload\r\n//           ? { ...contact, showContactListItem: true }\r\n//           : contact\r\n//       );\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filter = createReducer(\"\", {\r\n  [contactsActions.changeFilter]: (state, action) => action.payload.filter,\r\n});\r\n\r\n// const filter = (state = \"\", { payload, type }) => {\r\n//   switch (type) {\r\n//     case contactsActions.changeFilter.type:\r\n//       return payload.filter;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n// handleAddContact = (name, number) => {\r\n//   const contactObj = {\r\n//     id: uuidv4(),\r\n//     text: name,\r\n//     number: number,\r\n//   };\r\n\r\n//   let sameName = checkSameContact(contactObj, this.state.contacts);\r\n\r\n//   if (sameName) {\r\n//     this.setState(() => ({\r\n//       sameName: sameName.text,\r\n//       showNotification: true,\r\n//     }));\r\n//   } else {\r\n//     this.setState((prev) => ({\r\n//       contacts: [...prev.contacts, contactObj],\r\n//       showContactListItem: true,\r\n//     }));\r\n//   }\r\n// };\r\n\r\n// updateSameName = (name) => {\r\n//   this.setState((prevState) => ({\r\n//     contacts: prevState.contacts.map((contact) =>\r\n//       contact.text === name\r\n//         ? { ...contacts, showContactListItem: !contacts.showContactListItem }\r\n//         : contact\r\n//     ),\r\n//   }));\r\n// };\r\n","import contactReducer from \"./contacts/contactsReducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"contactForm_container__3w9Gr\",\"form\":\"contactForm_form__1XNrA\",\"label\":\"contactForm_label__1Cql0\",\"inputs\":\"contactForm_inputs__ESel7\",\"button\":\"contactForm_button__1ijyj\"};"],"sourceRoot":""}